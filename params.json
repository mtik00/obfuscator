{"name":"Obfuscator","tagline":"mechanism for obfuscating a set of data","body":"[![travis ci build state](https://travis-ci.org/mtik00/obfuscator.svg?branch=master)](https://travis-ci.org/mtik00/obfuscator)\r\n[![Coverage Status](https://coveralls.io/repos/mtik00/obfuscator/badge.png?branch=master)](https://coveralls.io/r/mtik00/obfuscator?branch=master)\r\n\r\nIntroduction\r\n============\r\n\r\nObfuscator is a Python package used to obfuscate a set of data (e.g. bytes).  It\r\nprovides **no** encryption!  It's strictly a \"security through obscurity\" tool,\r\nwith limited usefulness.  You have been warned!\r\n\r\nDocumentation\r\n=============\r\n\r\nDocumentation is hosted on readthedocs: [obfuscator.readthedocs.org](http://obfuscator.readthedocs.org/en/latest/)\r\n\r\nInstall\r\n=======\r\nDownload the tarball and install with `pip install <package>`.\r\n\r\nUsage\r\n=====\r\nSee the unit tests for more in-depth examples.  Here are the basics:\r\n\r\n```python\r\nimport obfuscator\r\noriginal_bytes = map(ord, \"testing\")\r\n_key, obfuscated_bytes = obfuscator.obfuscate_xor(original_bytes, key=0x66)\r\ndeobfuscated_bytes = obfuscator.deobfuscate_xor(key=0x66, data=obfuscated_bytes)\r\nassert original_bytes == deobfuscated_bytes\r\n\r\nofile = obfuscator.file.ObfuscatedFile(\"test.bin\")\r\ndata = map(ord, \"testing\")\r\nofile.write(data, key=123, minimum_length=32)\r\nself.assertEqual(32, os.path.getsize(\"test.bin\"))\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}